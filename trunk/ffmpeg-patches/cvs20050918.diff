diff -urN ffmpeg.orig/Makefile ffmpeg.src/Makefile
--- ffmpeg.orig/Makefile	2005-08-11 14:12:24.000000000 +0200
+++ ffmpeg.src/Makefile	2005-11-27 16:34:24.164554736 +0100
@@ -7,7 +7,10 @@
 VPATH=$(SRC_PATH)
 
 CFLAGS=$(OPTFLAGS) -I. -I$(SRC_PATH) -I$(SRC_PATH)/libavutil -I$(SRC_PATH)/libavcodec -I$(SRC_PATH)/libavformat -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE
-LDFLAGS+= -g 
+
+ifeq ($(DVBCUT_NO_DEBUG),)
+LDFLAGS+= -g
+endif
 
 ifeq ($(TARGET_GPROF),yes)
 CFLAGS+=-p
@@ -188,11 +191,10 @@
 	@test -f .libs || touch .libs
 	@for i in $(DEP_LIBS) ; do if $(TEST) $$i -nt .libs ; then touch .libs; fi ; done
 
-clean: $(CLEANVHOOK)
+clean:
 	$(MAKE) -C libavutil clean
 	$(MAKE) -C libavcodec clean
 	$(MAKE) -C libavformat clean
-	$(MAKE) -C tests clean
 	rm -f *.o *.d *~ .libs .depend gmon.out TAGS ffmpeg_g$(EXESUF) \
 	   ffplay_g$(EXESUF) $(PROG) $(PROGTEST) $(QTFASTSTART)
 
diff -urN ffmpeg.orig/libavcodec/Makefile ffmpeg.src/libavcodec/Makefile
--- ffmpeg.orig/libavcodec/Makefile	2005-09-13 19:32:01.000000000 +0200
+++ ffmpeg.src/libavcodec/Makefile	2005-11-27 16:34:24.165554584 +0100
@@ -17,213 +17,9 @@
       ratecontrol.o adpcm.o eval.o error_resilience.o \
       fft.o mdct.o raw.o golomb.o cabac.o\
       dpcm.o adx.o faandct.o parser.o g726.o \
-      vp3dsp.o h264idct.o rangecoder.o pnm.o h263.o msmpeg4.o h263dec.o dvdsub.o dvbsub.o dvbsubdec.o\
+      vp3dsp.o h264idct.o rangecoder.o pnm.o h263.o msmpeg4.o h263dec.o \
       opt.o
 
-ifeq ($(CONFIG_AASC_DECODER),yes)
-    OBJS+= aasc.o
-endif
-ifeq ($(CONFIG_ALAC_DECODER),yes)
-    OBJS+= alac.o
-endif
-ifneq ($(CONFIG_ASV1_DECODER)$(CONFIG_ASV1_ENCODER)$(CONFIG_ASV2_DECODER)$(CONFIG_ASV2_ENCODER),)
-    OBJS+= asv1.o
-endif
-ifeq ($(CONFIG_CINEPAK_DECODER),yes)
-    OBJS+= cinepak.o
-endif
-ifneq ($(CONFIG_CLJR_DECODER)$(CONFIG_CLJR_ENCODER),)
-    OBJS+= cljr.o
-endif
-ifeq ($(CONFIG_CYUV_DECODER),yes)
-    OBJS+= cyuv.o
-endif
-ifneq ($(CONFIG_DVVIDEO_DECODER)$(CONFIG_DVVIDEO_ENCODER),)
-    OBJS+= dv.o
-endif
-ifeq ($(CONFIG_EIGHTBPS_DECODER),yes)
-    OBJS+= 8bps.o
-endif
-ifneq ($(CONFIG_FFV1_DECODER)$(CONFIG_FFV1_ENCODER),)
-    OBJS+= ffv1.o
-endif
-ifeq ($(CONFIG_FLAC_DECODER),yes)
-    OBJS+= flac.o
-endif
-ifeq ($(CONFIG_FLIC_DECODER),yes)
-    OBJS+= flicvideo.o
-endif
-ifeq ($(CONFIG_FOURXM_DECODER),yes)
-    OBJS+= 4xm.o
-endif
-ifeq ($(CONFIG_FRAPS_DECODER),yes)
-    OBJS+= fraps.o
-endif
-ifneq ($(CONFIG_H261_DECODER)$(CONFIG_H261_ENCODER),)
-    OBJS+= h261.o
-endif
-ifneq ($(CONFIG_H264_DECODER)$(CONFIG_SVQ3_DECODER),)
-    OBJS+= h264.o
-endif
-ifneq ($(CONFIG_HUFFYUV_DECODER)$(CONFIG_HUFFYUV_ENCODER)$(CONFIG_FFVHUFF_DECODER)$(CONFIG_FFVHUFF_ENCODER),)
-    OBJS+= huffyuv.o
-endif
-ifeq ($(CONFIG_IDCIN_DECODER),yes)
-    OBJS+= idcinvideo.o
-endif
-ifeq ($(CONFIG_INDEO2_DECODER),yes)
-    OBJS+= indeo2.o
-endif
-ifeq ($(CONFIG_INDEO3_DECODER),yes)
-    OBJS+= indeo3.o
-endif
-ifeq ($(CONFIG_INTERPLAY_VIDEO_DECODER),yes)
-    OBJS+= interplayvideo.o
-endif
-ifneq ($(CONFIG_MSZH_DECODER)$(CONFIG_ZLIB_DECODER)$(CONFIG_ZLIB_ENCODER),)
-    OBJS+= lcl.o
-endif
-ifeq ($(CONFIG_LOCO_DECODER),yes)
-    OBJS+= loco.o
-endif
-ifneq ($(CONFIG_MACE3_DECODER)$(CONFIG_MACE6_DECODER),)
-    OBJS+= mace.o
-endif
-ifeq ($(CONFIG_MSRLE_DECODER),yes)
-    OBJS+= msrle.o
-endif
-ifeq ($(CONFIG_MSVIDEO1_DECODER),yes)
-    OBJS+= msvideo1.o
-endif
-ifneq ($(CONFIG_PNG_DECODER)$(CONFIG_PNG_ENCODER),)
-    OBJS+= png.o
-endif
-ifeq ($(CONFIG_QDRAW_DECODER),yes)
-    OBJS+= qdrw.o
-endif
-ifeq ($(CONFIG_QPEG_DECODER),yes)
-    OBJS+= qpeg.o
-endif
-ifeq ($(CONFIG_QTRLE_DECODER),yes)
-    OBJS+= qtrle.o
-endif
-ifeq ($(CONFIG_RA_144_DECODER),yes)
-    OBJS+= ra144.o
-endif
-ifeq ($(CONFIG_RA_288_DECODER),yes)
-    OBJS+= ra288.o
-endif
-ifeq ($(CONFIG_ROQ_DECODER),yes)
-    OBJS+= roqvideo.o
-endif
-ifeq ($(CONFIG_RPZA_DECODER),yes)
-    OBJS+= rpza.o
-endif
-ifneq ($(CONFIG_RV10_DECODER)$(CONFIG_RV20_DECODER)$(CONFIG_RV10_ENCODER)$(CONFIG_RV20_ENCODER),)
-    OBJS+= rv10.o
-endif
-ifeq ($(CONFIG_SHORTEN_DECODER),yes)
-    OBJS+= shorten.o
-endif
-ifeq ($(CONFIG_SMC_DECODER),yes)
-    OBJS+= smc.o
-endif
-ifneq ($(CONFIG_SNOW_DECODER)$(CONFIG_SNOW_ENCODER),)
-    OBJS+= snow.o
-endif
-ifneq ($(CONFIG_SONIC_DECODER)$(CONFIG_SONIC_ENCODER)$(CONFIG_SONIC_LS_ENCODER),)
-    OBJS+= sonic.o
-endif
-ifneq ($(CONFIG_SVQ1_DECODER)$(CONFIG_SVQ1_ENCODER),)
-    OBJS+= svq1.o
-endif
-ifeq ($(CONFIG_TRUEMOTION1_DECODER),yes)
-    OBJS+= truemotion1.o
-endif
-ifeq ($(CONFIG_TSCC_DECODER),yes)
-    OBJS+= tscc.o
-endif
-ifeq ($(CONFIG_ULTI_DECODER),yes)
-    OBJS+= ulti.o
-endif
-ifneq ($(CONFIG_VC9_DECODER)$(CONFIG_WMV3_DECODER),)
-    OBJS+= vc9.o
-endif
-ifneq ($(CONFIG_VCR1_DECODER)$(CONFIG_VCR1_ENCODER),)
-    OBJS+= vcr1.o
-endif
-ifneq ($(CONFIG_VMDVIDEO_DECODER)$(CONFIG_VMDAUDIO_DECODER),)
-    OBJS+= vmdav.o
-endif
-ifeq ($(CONFIG_VORBIS_DECODER),yes)
-    OBJS+= vorbis.o
-endif
-ifneq ($(CONFIG_VP3_DECODER)$(CONFIG_THEORA_DECODER),)
-    OBJS+= vp3.o
-endif
-ifeq ($(CONFIG_VQA_DECODER),yes)
-    OBJS+= vqavideo.o
-endif
-ifneq ($(CONFIG_WMAV1_DECODER)$(CONFIG_WMAV2_DECODER),)
-    OBJS+= wmadec.o
-endif
-ifeq ($(CONFIG_WNV1_DECODER),yes)
-    OBJS+= wnv1.o
-endif
-ifeq ($(CONFIG_WS_SND1_DECODER),yes)
-    OBJS+= ws-snd1.o
-endif
-ifneq ($(CONFIG_XAN_WC3_DECODER)$(CONFIG_XAN_WC4_DECODER),)
-    OBJS+= xan.o
-endif
-ifeq ($(CONFIG_XL_DECODER),yes)
-    OBJS+= xl.o
-endif
-      
-      
-AMROBJS=
-ifeq ($(AMR_NB),yes)
-ifeq ($(AMR_NB_FIXED),yes)
-AMROBJS= amr.o
-AMREXTRALIBS+= amr/*.o
-AMRLIBS=amrlibs
-CLEANAMR=cleanamr
-else
-AMROBJS= amr.o
-OBJS+= amr_float/sp_dec.o amr_float/sp_enc.o amr_float/interf_dec.o amr_float/interf_enc.o
-CLEANAMR=cleanamrfloat
-endif
-endif
-
-ifeq ($(HAVE_PTHREADS),yes)
-OBJS+= pthread.o
-endif
-
-ifeq ($(HAVE_W32THREADS),yes)
-OBJS+= w32thread.o
-endif
-
-ifeq ($(HAVE_BEOSTHREADS),yes)
-OBJS+= beosthread.o
-endif
-
-ifeq ($(AMR_WB),yes)
-AMROBJS= amr.o
-OBJS+= amrwb_float/dec_acelp.o amrwb_float/dec_dtx.o amrwb_float/dec_gain.o \
-		amrwb_float/dec_if.o amrwb_float/dec_lpc.o amrwb_float/dec_main.o \
-		amrwb_float/dec_rom.o amrwb_float/dec_util.o amrwb_float/enc_acelp.o \
-		amrwb_float/enc_dtx.o amrwb_float/enc_gain.o amrwb_float/enc_if.o \
-		amrwb_float/enc_lpc.o amrwb_float/enc_main.o amrwb_float/enc_rom.o \
-		amrwb_float/enc_util.o amrwb_float/if_rom.o
-endif
-OBJS+= $(AMROBJS)
-CLEANAMRWB=cleanamrwbfloat
-ASM_OBJS=
-
-ifeq ($(HAVE_XVMC_ACCEL),yes)
-OBJS+= xvmcvideo.o
-endif
-
 # currently using liba52 for ac3 decoding
 ifeq ($(CONFIG_AC3),yes)
 OBJS+= a52dec.o
@@ -244,61 +40,6 @@
 EXTRALIBS += -ldts
 endif
 
-ifeq ($(CONFIG_FAAD),yes)
-OBJS+= faad.o
-ifeq ($(CONFIG_FAADBIN),yes)
-# no libs needed
-else
-EXTRALIBS += -lfaad
-endif
-endif
-
-ifeq ($(CONFIG_FAAC),yes)
-OBJS+= faac.o
-EXTRALIBS += -lfaac
-endif
-
-ifeq ($(CONFIG_XVID),yes)
-OBJS+= xvidff.o
-EXTRALIBS += -lxvidcore
-endif
-
-ifeq ($(CONFIG_X264),yes)
-OBJS+= x264.o
-EXTRALIBS += -lx264
-endif
-
-ifeq ($(CONFIG_PP),yes)
-ifeq ($(SHARED_PP),yes)
-EXTRALIBS += -Llibpostproc -lpostproc$(BUILDSUF)
-else
-# LIBS += libpostproc/libpostproc.a ... should be fixed
-OBJS += libpostproc/postprocess.o
-endif
-endif
-
-ifeq ($(CONFIG_MP3LAME),yes)
-OBJS += mp3lameaudio.o
-EXTRALIBS += -lmp3lame
-endif
-
-ifeq ($(CONFIG_LIBOGG),yes)
-ifeq ($(CONFIG_LIBVORBIS),yes)
-OBJS += oggvorbis.o
-EXTRALIBS += -lvorbisenc -lvorbis
-endif
-ifeq ($(CONFIG_LIBTHEORA), yes)
-OBJS += oggtheora.o
-EXTRALIBS += -ltheora
-endif
-EXTRALIBS += -logg
-endif
-
-ifeq ($(CONFIG_LIBGSM),yes)
-OBJS += libgsm.o
-EXTRALIBS += -lgsm
-endif
-
 ifeq ($(TARGET_GPROF),yes)
 CFLAGS+=-p
 LDFLAGS+=-p
@@ -400,9 +141,6 @@
 	$(RANLIB) $@
 
 $(SLIB): $(OBJS)
-ifeq ($(CONFIG_PP),yes)
-	$(MAKE) -C libpostproc
-endif
 ifeq ($(CONFIG_WIN32),yes)
 	$(CC) $(SHFLAGS) -Wl,--output-def,$(@:.dll=.def) -o $@ $(OBJS) $(EXTRALIBS) $(AMREXTRALIBS)
 	-lib /machine:i386 /def:$(@:.dll=.def)
@@ -412,9 +150,6 @@
 
 dsputil.o: dsputil.c dsputil.h
 
-libpostproc/libpostproc.a:
-	$(MAKE) -C libpostproc
-
 %.o: %.c
 	$(CC) $(CFLAGS) $(LIBOBJFLAGS) -c -o $@ $< 
 
@@ -437,7 +172,6 @@
 	   sparc/*.o sparc/*~ \
 	   liba52/*.o liba52/*~ \
 	   apiexample $(TESTS)
-	$(MAKE) -C libpostproc clean
 
 distclean: clean
 	rm -f Makefile.bak .depend
@@ -483,9 +217,6 @@
 	ln -sf libavcodec-$(VERSION).so $(libdir)/libavcodec.so
 	$(LDCONFIG) || true
 endif
-ifeq ($(CONFIG_PP),yes)
-	$(MAKE) -C libpostproc $@
-endif
 else
 install:
 endif
diff -urN ffmpeg.orig/libavcodec/allcodecs.c ffmpeg.src/libavcodec/allcodecs.c
--- ffmpeg.orig/libavcodec/allcodecs.c	2005-09-13 19:32:01.000000000 +0200
+++ ffmpeg.src/libavcodec/allcodecs.c	2005-11-27 16:36:00.214952856 +0100
@@ -1,3 +1,4 @@
+
 /*
  * Utils for libavcodec
  * Copyright (c) 2002 Fabrice Bellard.
@@ -38,552 +39,22 @@
 	return;
     inited = 1;
 
-    /* encoders */
-#ifdef CONFIG_ENCODERS
-#ifdef CONFIG_AC3_ENCODER
-    register_avcodec(&ac3_encoder);
-#endif //CONFIG_AC3_ENCODER
-#ifdef CONFIG_MP2_ENCODER
-    register_avcodec(&mp2_encoder);
-#endif //CONFIG_MP2_ENCODER
-#ifdef CONFIG_MP3LAME
-#ifdef CONFIG_MP3LAME_ENCODER
-    register_avcodec(&mp3lame_encoder);
-#endif //CONFIG_MP3LAME_ENCODER
-#endif
-#ifdef CONFIG_LIBVORBIS
-#ifdef CONFIG_OGGVORBIS_ENCODER
-    register_avcodec(&oggvorbis_encoder);
-#endif //CONFIG_OGGVORBIS_ENCODER
-#if (defined CONFIG_OGGVORBIS_DECODER && !defined CONFIG_VORBIS_DECODER)
-    register_avcodec(&oggvorbis_decoder);
-#endif //CONFIG_OGGVORBIS_DECODER
-#endif
-#ifdef CONFIG_LIBTHEORA
-#ifdef CONFIG_OGGTHEORA_ENCODER
-//    register_avcodec(&oggtheora_encoder);
-#endif //CONFIG_OGGTHEORA_ENCODER
-#ifdef CONFIG_OGGTHEORA_DECODER
-    register_avcodec(&oggtheora_decoder);
-#endif //CONFIG_OGGTHEORA_DECODER
-#endif
-#ifdef CONFIG_FAAC
-#ifdef CONFIG_FAAC_ENCODER
-    register_avcodec(&faac_encoder);
-#endif //CONFIG_FAAC_ENCODER
-#endif
-#ifdef CONFIG_XVID
-#ifdef CONFIG_XVID_ENCODER
-    register_avcodec(&xvid_encoder);
-#endif //CONFIG_XVID_ENCODER
-#endif
-#ifdef CONFIG_MPEG1VIDEO_ENCODER
-    register_avcodec(&mpeg1video_encoder);
-#endif //CONFIG_MPEG1VIDEO_ENCODER
-#ifdef CONFIG_H264_ENCODER
-//    register_avcodec(&h264_encoder);
-#endif //CONFIG_H264_ENCODER
-#ifdef CONFIG_MPEG2VIDEO_ENCODER
     register_avcodec(&mpeg2video_encoder);
-#endif //CONFIG_MPEG2VIDEO_ENCODER
-#ifdef CONFIG_H261_ENCODER
-    register_avcodec(&h261_encoder);
-#endif //CONFIG_H261_ENCODER
-#ifdef CONFIG_H263_ENCODER
-    register_avcodec(&h263_encoder);
-#endif //CONFIG_H263_ENCODER
-#ifdef CONFIG_H263P_ENCODER
-    register_avcodec(&h263p_encoder);
-#endif //CONFIG_H263P_ENCODER
-#ifdef CONFIG_FLV_ENCODER
-    register_avcodec(&flv_encoder);
-#endif //CONFIG_FLV_ENCODER
-#ifdef CONFIG_RV10_ENCODER
-    register_avcodec(&rv10_encoder);
-#endif //CONFIG_RV10_ENCODER
-#ifdef CONFIG_RV20_ENCODER
-    register_avcodec(&rv20_encoder);
-#endif //CONFIG_RV20_ENCODER
-#ifdef CONFIG_MPEG4_ENCODER
-    register_avcodec(&mpeg4_encoder);
-#endif //CONFIG_MPEG4_ENCODER
-#ifdef CONFIG_MSMPEG4V1_ENCODER
-    register_avcodec(&msmpeg4v1_encoder);
-#endif //CONFIG_MSMPEG4V1_ENCODER
-#ifdef CONFIG_MSMPEG4V2_ENCODER
-    register_avcodec(&msmpeg4v2_encoder);
-#endif //CONFIG_MSMPEG4V2_ENCODER
-#ifdef CONFIG_MSMPEG4V3_ENCODER
-    register_avcodec(&msmpeg4v3_encoder);
-#endif //CONFIG_MSMPEG4V3_ENCODER
-#ifdef CONFIG_WMV1_ENCODER
-    register_avcodec(&wmv1_encoder);
-#endif //CONFIG_WMV1_ENCODER
-#ifdef CONFIG_WMV2_ENCODER
-    register_avcodec(&wmv2_encoder);
-#endif //CONFIG_WMV2_ENCODER
-#ifdef CONFIG_SVQ1_ENCODER
-    register_avcodec(&svq1_encoder);
-#endif //CONFIG_SVQ1_ENCODER
-#ifdef CONFIG_MJPEG_ENCODER
-    register_avcodec(&mjpeg_encoder);
-#endif //CONFIG_MJPEG_ENCODER
-#ifdef CONFIG_LJPEG_ENCODER
-    register_avcodec(&ljpeg_encoder);
-#endif //CONFIG_LJPEG_ENCODER
-#ifdef CONFIG_ZLIB
-#ifdef CONFIG_PNG_ENCODER
-    register_avcodec(&png_encoder);
-#endif //CONFIG_PNG_ENCODER
-#endif
-#ifdef CONFIG_PPM_ENCODER
-    register_avcodec(&ppm_encoder);
-#endif //CONFIG_PPM_ENCODER
-#ifdef CONFIG_PGM_ENCODER
-    register_avcodec(&pgm_encoder);
-#endif //CONFIG_PGM_ENCODER
-#ifdef CONFIG_PGMYUV_ENCODER
-    register_avcodec(&pgmyuv_encoder);
-#endif //CONFIG_PGMYUV_ENCODER
-#ifdef CONFIG_PBM_ENCODER
-    register_avcodec(&pbm_encoder);
-#endif //CONFIG_PBM_ENCODER
-#ifdef CONFIG_PAM_ENCODER
-    register_avcodec(&pam_encoder);
-#endif //CONFIG_PAM_ENCODER
-#ifdef CONFIG_HUFFYUV_ENCODER
-    register_avcodec(&huffyuv_encoder);
-#endif //CONFIG_HUFFYUV_ENCODER
-#ifdef CONFIG_FFVHUFF_ENCODER
-    register_avcodec(&ffvhuff_encoder);
-#endif //CONFIG_FFVHUFF_ENCODER
-#ifdef CONFIG_ASV1_ENCODER
-    register_avcodec(&asv1_encoder);
-#endif //CONFIG_ASV1_ENCODER
-#ifdef CONFIG_ASV2_ENCODER
-    register_avcodec(&asv2_encoder);
-#endif //CONFIG_ASV2_ENCODER
-#ifdef CONFIG_FFV1_ENCODER
-    register_avcodec(&ffv1_encoder);
-#endif //CONFIG_FFV1_ENCODER
-#ifdef CONFIG_SNOW_ENCODER
-    register_avcodec(&snow_encoder);
-#endif //CONFIG_SNOW_ENCODER
-#ifdef CONFIG_ZLIB_ENCODER
-    register_avcodec(&zlib_encoder);
-#endif //CONFIG_ZLIB_ENCODER
-#ifdef CONFIG_DVVIDEO_ENCODER
-    register_avcodec(&dvvideo_encoder);
-#endif //CONFIG_DVVIDEO_ENCODER
-#ifdef CONFIG_SONIC_ENCODER
-    register_avcodec(&sonic_encoder);
-#endif //CONFIG_SONIC_ENCODER
-#ifdef CONFIG_SONIC_LS_ENCODER
-    register_avcodec(&sonic_ls_encoder);
-#endif //CONFIG_SONIC_LS_ENCODER
-#ifdef CONFIG_X264
-#ifdef CONFIG_X264_ENCODER
-    register_avcodec(&x264_encoder);
-#endif //CONFIG_X264_ENCODER
-#endif
-#ifdef CONFIG_LIBGSM
-    register_avcodec(&libgsm_encoder);
-#endif //CONFIG_LIBGSM
-#endif /* CONFIG_ENCODERS */
-#ifdef CONFIG_RAWVIDEO_ENCODER
-    register_avcodec(&rawvideo_encoder);
-#endif //CONFIG_RAWVIDEO_ENCODER
-#ifdef CONFIG_RAWVIDEO_DECODER
-    register_avcodec(&rawvideo_decoder);
-#endif //CONFIG_RAWVIDEO_DECODER
-
-    /* decoders */
-#ifdef CONFIG_DECODERS
-#ifdef CONFIG_H263_DECODER
-    register_avcodec(&h263_decoder);
-#endif //CONFIG_H263_DECODER
-#ifdef CONFIG_H261_DECODER
-    register_avcodec(&h261_decoder);
-#endif //CONFIG_H261_DECODER
-#ifdef CONFIG_MPEG4_DECODER
-    register_avcodec(&mpeg4_decoder);
-#endif //CONFIG_MPEG4_DECODER
-#ifdef CONFIG_MSMPEG4V1_DECODER
-    register_avcodec(&msmpeg4v1_decoder);
-#endif //CONFIG_MSMPEG4V1_DECODER
-#ifdef CONFIG_MSMPEG4V2_DECODER
-    register_avcodec(&msmpeg4v2_decoder);
-#endif //CONFIG_MSMPEG4V2_DECODER
-#ifdef CONFIG_MSMPEG4V3_DECODER
-    register_avcodec(&msmpeg4v3_decoder);
-#endif //CONFIG_MSMPEG4V3_DECODER
-#ifdef CONFIG_WMV1_DECODER
-    register_avcodec(&wmv1_decoder);
-#endif //CONFIG_WMV1_DECODER
-#ifdef CONFIG_WMV2_DECODER
-    register_avcodec(&wmv2_decoder);
-#endif //CONFIG_WMV2_DECODER
-#ifdef CONFIG_VC9_DECODER
-    register_avcodec(&vc9_decoder);
-#endif //CONFIG_VC9_DECODER
-#ifdef CONFIG_WMV3_DECODER
-    register_avcodec(&wmv3_decoder);
-#endif //CONFIG_WMV3_DECODER
-#ifdef CONFIG_H263I_DECODER
-    register_avcodec(&h263i_decoder);
-#endif //CONFIG_H263I_DECODER
-#ifdef CONFIG_FLV_DECODER
-    register_avcodec(&flv_decoder);
-#endif //CONFIG_FLV_DECODER
-#ifdef CONFIG_RV10_DECODER
-    register_avcodec(&rv10_decoder);
-#endif //CONFIG_RV10_DECODER
-#ifdef CONFIG_RV20_DECODER
-    register_avcodec(&rv20_decoder);
-#endif //CONFIG_RV20_DECODER
-#ifdef CONFIG_SVQ1_DECODER
-    register_avcodec(&svq1_decoder);
-#endif //CONFIG_SVQ1_DECODER
-#ifdef CONFIG_SVQ3_DECODER
-    register_avcodec(&svq3_decoder);
-#endif //CONFIG_SVQ3_DECODER
-#ifdef CONFIG_WMAV1_DECODER
-    register_avcodec(&wmav1_decoder);
-#endif //CONFIG_WMAV1_DECODER
-#ifdef CONFIG_WMAV2_DECODER
-    register_avcodec(&wmav2_decoder);
-#endif //CONFIG_WMAV2_DECODER
-#ifdef CONFIG_INDEO2_DECODER
-    register_avcodec(&indeo2_decoder);
-#endif //CONFIG_INDEO2_DECODER
-#ifdef CONFIG_INDEO3_DECODER
-    register_avcodec(&indeo3_decoder);
-#endif //CONFIG_INDEO3_DECODER
-#ifdef CONFIG_TSCC_DECODER
-    register_avcodec(&tscc_decoder);
-#endif //CONFIG_TSCC_DECODER
-#ifdef CONFIG_ULTI_DECODER
-    register_avcodec(&ulti_decoder);
-#endif //CONFIG_ULTI_DECODER
-#ifdef CONFIG_QDRAW_DECODER
-    register_avcodec(&qdraw_decoder);
-#endif //CONFIG_QDRAW_DECODER
-#ifdef CONFIG_XL_DECODER
-    register_avcodec(&xl_decoder);
-#endif //CONFIG_XL_DECODER
-#ifdef CONFIG_QPEG_DECODER
-    register_avcodec(&qpeg_decoder);
-#endif //CONFIG_QPEG_DECODER
-#ifdef CONFIG_LOCO_DECODER
-    register_avcodec(&loco_decoder);
-#endif //CONFIG_LOCO_DECODER
-#ifdef CONFIG_WNV1_DECODER
-    register_avcodec(&wnv1_decoder);
-#endif //CONFIG_WNV1_DECODER
-#ifdef CONFIG_AASC_DECODER
-    register_avcodec(&aasc_decoder);
-#endif //CONFIG_AASC_DECODER
-#ifdef CONFIG_FRAPS_DECODER
-    register_avcodec(&fraps_decoder);
-#endif //CONFIG_FRAPS_DECODER
-#ifdef CONFIG_FAAD
-#ifdef CONFIG_AAC_DECODER
-    register_avcodec(&aac_decoder);
-#endif //CONFIG_AAC_DECODER
-#ifdef CONFIG_MPEG4AAC_DECODER
-    register_avcodec(&mpeg4aac_decoder);
-#endif //CONFIG_MPEG4AAC_DECODER
-#endif
-#ifdef CONFIG_MPEG1VIDEO_DECODER
-    register_avcodec(&mpeg1video_decoder);
-#endif //CONFIG_MPEG1VIDEO_DECODER
-#ifdef CONFIG_MPEG2VIDEO_DECODER
     register_avcodec(&mpeg2video_decoder);
-#endif //CONFIG_MPEG2VIDEO_DECODER
-#ifdef CONFIG_MPEGVIDEO_DECODER
-    register_avcodec(&mpegvideo_decoder);
-#endif //CONFIG_MPEGVIDEO_DECODER
-#ifdef HAVE_XVMC
-#ifdef CONFIG_MPEG_XVMC_DECODER
-    register_avcodec(&mpeg_xvmc_decoder);
-#endif //CONFIG_MPEG_XVMC_DECODER
-#endif
-#ifdef CONFIG_DVVIDEO_DECODER
-    register_avcodec(&dvvideo_decoder);
-#endif //CONFIG_DVVIDEO_DECODER
-#ifdef CONFIG_MJPEG_DECODER
-    register_avcodec(&mjpeg_decoder);
-#endif //CONFIG_MJPEG_DECODER
-#ifdef CONFIG_MJPEGB_DECODER
-    register_avcodec(&mjpegb_decoder);
-#endif //CONFIG_MJPEGB_DECODER
-#ifdef CONFIG_SP5X_DECODER
-    register_avcodec(&sp5x_decoder);
-#endif //CONFIG_SP5X_DECODER
-#ifdef CONFIG_ZLIB
-#ifdef CONFIG_PNG_DECODER
-    register_avcodec(&png_decoder);
-#endif //CONFIG_PNG_DECODER
-#endif
-#ifdef CONFIG_MP2_DECODER
+    register_avcodec(&mp2_encoder);
     register_avcodec(&mp2_decoder);
-#endif //CONFIG_MP2_DECODER
-#ifdef CONFIG_MP3_DECODER
     register_avcodec(&mp3_decoder);
-#endif //CONFIG_MP3_DECODER
-#ifdef CONFIG_MP3ADU_DECODER
-    register_avcodec(&mp3adu_decoder);
-#endif //CONFIG_MP3ADU_DECODER
-#ifdef CONFIG_MP3ON4_DECODER
-    register_avcodec(&mp3on4_decoder);
-#endif //CONFIG_MP3ON4_DECODER
-#ifdef CONFIG_MACE3_DECODER
-    register_avcodec(&mace3_decoder);
-#endif //CONFIG_MACE3_DECODER
-#ifdef CONFIG_MACE6_DECODER
-    register_avcodec(&mace6_decoder);
-#endif //CONFIG_MACE6_DECODER
-#ifdef CONFIG_HUFFYUV_DECODER
-    register_avcodec(&huffyuv_decoder);
-#endif //CONFIG_HUFFYUV_DECODER
-#ifdef CONFIG_FFVHUFF_DECODER
-    register_avcodec(&ffvhuff_decoder);
-#endif //CONFIG_FFVHUFF_DECODER
-#ifdef CONFIG_FFV1_DECODER
-    register_avcodec(&ffv1_decoder);
-#endif //CONFIG_FFV1_DECODER
-#ifdef CONFIG_SNOW_DECODER
-    register_avcodec(&snow_decoder);
-#endif //CONFIG_SNOW_DECODER
-#ifdef CONFIG_CYUV_DECODER
-    register_avcodec(&cyuv_decoder);
-#endif //CONFIG_CYUV_DECODER
-#ifdef CONFIG_H264_DECODER
-    register_avcodec(&h264_decoder);
-#endif //CONFIG_H264_DECODER
-#ifdef CONFIG_VP3_DECODER
-    register_avcodec(&vp3_decoder);
-#endif //CONFIG_VP3_DECODER
-#if (defined CONFIG_THEORA_DECODER && !defined CONFIG_LIBTHEORA)
-    register_avcodec(&theora_decoder);
-#endif //CONFIG_THEORA_DECODER
-#ifdef CONFIG_ASV1_DECODER
-    register_avcodec(&asv1_decoder);
-#endif //CONFIG_ASV1_DECODER
-#ifdef CONFIG_ASV2_DECODER
-    register_avcodec(&asv2_decoder);
-#endif //CONFIG_ASV2_DECODER
-#ifdef CONFIG_VCR1_DECODER
-    register_avcodec(&vcr1_decoder);
-#endif //CONFIG_VCR1_DECODER
-#ifdef CONFIG_CLJR_DECODER
-    register_avcodec(&cljr_decoder);
-#endif //CONFIG_CLJR_DECODER
-#ifdef CONFIG_FOURXM_DECODER
-    register_avcodec(&fourxm_decoder);
-#endif //CONFIG_FOURXM_DECODER
-#ifdef CONFIG_MDEC_DECODER
-    register_avcodec(&mdec_decoder);
-#endif //CONFIG_MDEC_DECODER
-#ifdef CONFIG_ROQ_DECODER
-    register_avcodec(&roq_decoder);
-#endif //CONFIG_ROQ_DECODER
-#ifdef CONFIG_INTERPLAY_VIDEO_DECODER
-    register_avcodec(&interplay_video_decoder);
-#endif //CONFIG_INTERPLAY_VIDEO_DECODER
-#ifdef CONFIG_XAN_WC3_DECODER
-    register_avcodec(&xan_wc3_decoder);
-#endif //CONFIG_XAN_WC3_DECODER
-#ifdef CONFIG_RPZA_DECODER
-    register_avcodec(&rpza_decoder);
-#endif //CONFIG_RPZA_DECODER
-#ifdef CONFIG_CINEPAK_DECODER
-    register_avcodec(&cinepak_decoder);
-#endif //CONFIG_CINEPAK_DECODER
-#ifdef CONFIG_MSRLE_DECODER
-    register_avcodec(&msrle_decoder);
-#endif //CONFIG_MSRLE_DECODER
-#ifdef CONFIG_MSVIDEO1_DECODER
-    register_avcodec(&msvideo1_decoder);
-#endif //CONFIG_MSVIDEO1_DECODER
-#ifdef CONFIG_VQA_DECODER
-    register_avcodec(&vqa_decoder);
-#endif //CONFIG_VQA_DECODER
-#ifdef CONFIG_IDCIN_DECODER
-    register_avcodec(&idcin_decoder);
-#endif //CONFIG_IDCIN_DECODER
-#ifdef CONFIG_EIGHTBPS_DECODER
-    register_avcodec(&eightbps_decoder);
-#endif //CONFIG_EIGHTBPS_DECODER
-#ifdef CONFIG_SMC_DECODER
-    register_avcodec(&smc_decoder);
-#endif //CONFIG_SMC_DECODER
-#ifdef CONFIG_FLIC_DECODER
-    register_avcodec(&flic_decoder);
-#endif //CONFIG_FLIC_DECODER
-#ifdef CONFIG_TRUEMOTION1_DECODER
-    register_avcodec(&truemotion1_decoder);
-#endif //CONFIG_TRUEMOTION1_DECODER
-#ifdef CONFIG_VMDVIDEO_DECODER
-    register_avcodec(&vmdvideo_decoder);
-#endif //CONFIG_VMDVIDEO_DECODER
-#ifdef CONFIG_VMDAUDIO_DECODER
-    register_avcodec(&vmdaudio_decoder);
-#endif //CONFIG_VMDAUDIO_DECODER
-#ifdef CONFIG_MSZH_DECODER
-    register_avcodec(&mszh_decoder);
-#endif //CONFIG_MSZH_DECODER
-#ifdef CONFIG_ZLIB_DECODER
-    register_avcodec(&zlib_decoder);
-#endif //CONFIG_ZLIB_DECODER
-#ifdef CONFIG_SONIC_DECODER
-    register_avcodec(&sonic_decoder);
-#endif //CONFIG_SONIC_DECODER
+
 #ifdef CONFIG_AC3
-#ifdef CONFIG_AC3_DECODER
+    register_avcodec(&ac3_encoder);
     register_avcodec(&ac3_decoder);
-#endif //CONFIG_AC3_DECODER
 #endif
+
 #ifdef CONFIG_DTS
-#ifdef CONFIG_DTS_DECODER
     register_avcodec(&dts_decoder);
-#endif //CONFIG_DTS_DECODER
 #endif
-#ifdef CONFIG_RA_144_DECODER
-    register_avcodec(&ra_144_decoder);
-#endif //CONFIG_RA_144_DECODER
-#ifdef CONFIG_RA_288_DECODER
-    register_avcodec(&ra_288_decoder);
-#endif //CONFIG_RA_288_DECODER
-#ifdef CONFIG_ROQ_DPCM_DECODER
-    register_avcodec(&roq_dpcm_decoder);
-#endif //CONFIG_ROQ_DPCM_DECODER
-#ifdef CONFIG_INTERPLAY_DPCM_DECODER
-    register_avcodec(&interplay_dpcm_decoder);
-#endif //CONFIG_INTERPLAY_DPCM_DECODER
-#ifdef CONFIG_XAN_DPCM_DECODER
-    register_avcodec(&xan_dpcm_decoder);
-#endif //CONFIG_XAN_DPCM_DECODER
-#ifdef CONFIG_SOL_DPCM_DECODER
-    register_avcodec(&sol_dpcm_decoder);
-#endif //CONFIG_SOL_DPCM_DECODER
-#ifdef CONFIG_QTRLE_DECODER
-    register_avcodec(&qtrle_decoder);
-#endif //CONFIG_QTRLE_DECODER
-#ifdef CONFIG_FLAC_DECODER
-    register_avcodec(&flac_decoder);
-#endif //CONFIG_FLAC_DECODER
-#ifdef CONFIG_SHORTEN_DECODER
-    register_avcodec(&shorten_decoder);
-#endif //CONFIG_SHORTEN_DECODER
-#ifdef CONFIG_ALAC_DECODER
-    register_avcodec(&alac_decoder);
-#endif //CONFIG_ALAC_DECODER
-#ifdef CONFIG_WS_SND1_DECODER
-    register_avcodec(&ws_snd1_decoder);
-#endif //CONFIG_WS_SND1_DECODER
-#ifdef CONFIG_VORBIS_DECODER
-    register_avcodec(&vorbis_decoder);
-#endif
-#ifdef CONFIG_LIBGSM
-    register_avcodec(&libgsm_decoder);
-#endif //CONFIG_LIBGSM
-#endif /* CONFIG_DECODERS */
-
-#ifdef AMR_NB
-#ifdef CONFIG_AMR_NB_DECODER
-    register_avcodec(&amr_nb_decoder);
-#endif //CONFIG_AMR_NB_DECODER
-#ifdef CONFIG_ENCODERS
-#ifdef CONFIG_AMR_NB_ENCODER
-    register_avcodec(&amr_nb_encoder);
-#endif //CONFIG_AMR_NB_ENCODER
-#endif //CONFIG_ENCODERS
-#endif /* AMR_NB */
-
-#ifdef AMR_WB
-#ifdef CONFIG_AMR_WB_DECODER
-    register_avcodec(&amr_wb_decoder);
-#endif //CONFIG_AMR_WB_DECODER
-#ifdef CONFIG_ENCODERS
-#ifdef CONFIG_AMR_WB_ENCODER
-    register_avcodec(&amr_wb_encoder);
-#endif //CONFIG_AMR_WB_ENCODER
-#endif //CONFIG_ENCODERS
-#endif /* AMR_WB */
-
-    /* pcm codecs */
-
-#ifdef CONFIG_ENCODERS
-#define PCM_CODEC(id, name) \
-    register_avcodec(& name ## _encoder); \
-    register_avcodec(& name ## _decoder); \
-
-#else
-#define PCM_CODEC(id, name) \
-    register_avcodec(& name ## _decoder);
-#endif
-
-PCM_CODEC(CODEC_ID_PCM_S32LE, pcm_s32le);
-PCM_CODEC(CODEC_ID_PCM_S32BE, pcm_s32be);
-PCM_CODEC(CODEC_ID_PCM_U32LE, pcm_u32le);
-PCM_CODEC(CODEC_ID_PCM_U32BE, pcm_u32be);
-PCM_CODEC(CODEC_ID_PCM_S24LE, pcm_s24le);
-PCM_CODEC(CODEC_ID_PCM_S24BE, pcm_s24be);
-PCM_CODEC(CODEC_ID_PCM_U24LE, pcm_u24le);
-PCM_CODEC(CODEC_ID_PCM_U24BE, pcm_u24be);
-PCM_CODEC(CODEC_ID_PCM_S24DAUD, pcm_s24daud);
-PCM_CODEC(CODEC_ID_PCM_S16LE, pcm_s16le);
-PCM_CODEC(CODEC_ID_PCM_S16BE, pcm_s16be);
-PCM_CODEC(CODEC_ID_PCM_U16LE, pcm_u16le);
-PCM_CODEC(CODEC_ID_PCM_U16BE, pcm_u16be);
-PCM_CODEC(CODEC_ID_PCM_S8, pcm_s8);
-PCM_CODEC(CODEC_ID_PCM_U8, pcm_u8);
-PCM_CODEC(CODEC_ID_PCM_ALAW, pcm_alaw);
-PCM_CODEC(CODEC_ID_PCM_MULAW, pcm_mulaw);
-
-    /* adpcm codecs */
-PCM_CODEC(CODEC_ID_ADPCM_IMA_QT, adpcm_ima_qt);
-PCM_CODEC(CODEC_ID_ADPCM_IMA_WAV, adpcm_ima_wav);
-PCM_CODEC(CODEC_ID_ADPCM_IMA_DK3, adpcm_ima_dk3);
-PCM_CODEC(CODEC_ID_ADPCM_IMA_DK4, adpcm_ima_dk4);
-PCM_CODEC(CODEC_ID_ADPCM_IMA_WS, adpcm_ima_ws);
-PCM_CODEC(CODEC_ID_ADPCM_IMA_SMJPEG, adpcm_ima_smjpeg);
-PCM_CODEC(CODEC_ID_ADPCM_MS, adpcm_ms);
-PCM_CODEC(CODEC_ID_ADPCM_4XM, adpcm_4xm);
-PCM_CODEC(CODEC_ID_ADPCM_XA, adpcm_xa);
-PCM_CODEC(CODEC_ID_ADPCM_ADX, adpcm_adx);
-PCM_CODEC(CODEC_ID_ADPCM_EA, adpcm_ea);
-PCM_CODEC(CODEC_ID_ADPCM_G726, adpcm_g726);
-PCM_CODEC(CODEC_ID_ADPCM_CT, adpcm_ct);
-PCM_CODEC(CODEC_ID_ADPCM_SWF, adpcm_swf);
-PCM_CODEC(CODEC_ID_ADPCM_YAMAHA, adpcm_yamaha);
-
-#undef PCM_CODEC
-
-    /* subtitles */ 
-    register_avcodec(&dvdsub_decoder);
-    register_avcodec(&dvbsub_encoder);
-    register_avcodec(&dvbsub_decoder);
-
-    /* parsers */ 
-    av_register_codec_parser(&mpegvideo_parser);
-    av_register_codec_parser(&mpeg4video_parser);
-#if defined(CONFIG_H261_DECODER) || defined(CONFIG_H261_ENCODER)
-    av_register_codec_parser(&h261_parser);
-#endif
-    av_register_codec_parser(&h263_parser);
-#ifdef CONFIG_H264_DECODER
-    av_register_codec_parser(&h264_parser);
-#endif
-    av_register_codec_parser(&mjpeg_parser);
-    av_register_codec_parser(&pnm_parser);
-
+    
     av_register_codec_parser(&mpegaudio_parser);
-#ifdef CONFIG_AC3
-    av_register_codec_parser(&ac3_parser);
-#endif
-    av_register_codec_parser(&dvdsub_parser);
-    av_register_codec_parser(&dvbsub_parser);
+//     av_register_codec_parser(&ac3_parser);
 }
 
diff -urN ffmpeg.orig/libavcodec/mpegvideo.c ffmpeg.src/libavcodec/mpegvideo.c
--- ffmpeg.orig/libavcodec/mpegvideo.c	2005-09-13 19:32:02.000000000 +0200
+++ ffmpeg.src/libavcodec/mpegvideo.c	2005-11-27 16:34:24.175553064 +0100
@@ -1103,145 +1103,145 @@
     s->time_increment_bits = av_log2(s->avctx->time_base.den - 1) + 1;
 
     switch(avctx->codec->id) {
-    case CODEC_ID_MPEG1VIDEO:
-        s->out_format = FMT_MPEG1;
-        s->low_delay= 0; //s->max_b_frames ? 0 : 1;
-        avctx->delay= s->low_delay ? 0 : (s->max_b_frames + 1);
-        break;
+//     case CODEC_ID_MPEG1VIDEO:
+//         s->out_format = FMT_MPEG1;
+//         s->low_delay= 0; //s->max_b_frames ? 0 : 1;
+//         avctx->delay= s->low_delay ? 0 : (s->max_b_frames + 1);
+//         break;
     case CODEC_ID_MPEG2VIDEO:
         s->out_format = FMT_MPEG1;
         s->low_delay= 0; //s->max_b_frames ? 0 : 1;
         avctx->delay= s->low_delay ? 0 : (s->max_b_frames + 1);
         s->rtp_mode= 1;
         break;
-    case CODEC_ID_LJPEG:
-    case CODEC_ID_MJPEG:
-        s->out_format = FMT_MJPEG;
-        s->intra_only = 1; /* force intra only for jpeg */
-        s->mjpeg_write_tables = 1; /* write all tables */
-	s->mjpeg_data_only_frames = 0; /* write all the needed headers */
-        s->mjpeg_vsample[0] = 1<<chroma_v_shift;
-        s->mjpeg_vsample[1] = 1;
-        s->mjpeg_vsample[2] = 1; 
-        s->mjpeg_hsample[0] = 1<<chroma_h_shift;
-        s->mjpeg_hsample[1] = 1; 
-        s->mjpeg_hsample[2] = 1; 
-        if (mjpeg_init(s) < 0)
-            return -1;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_H261:
-        s->out_format = FMT_H261;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_H263:
-        if (h263_get_picture_format(s->width, s->height) == 7) {
-            av_log(avctx, AV_LOG_INFO, "Input picture size isn't suitable for h263 codec! try h263+\n");
-            return -1;
-        }
-        s->out_format = FMT_H263;
-	s->obmc= (avctx->flags & CODEC_FLAG_OBMC) ? 1:0;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_H263P:
-        s->out_format = FMT_H263;
-        s->h263_plus = 1;
-	/* Fx */
-        s->umvplus = (avctx->flags & CODEC_FLAG_H263P_UMV) ? 1:0;
-	s->h263_aic= (avctx->flags & CODEC_FLAG_H263P_AIC) ? 1:0;
-	s->modified_quant= s->h263_aic;
-	s->alt_inter_vlc= (avctx->flags & CODEC_FLAG_H263P_AIV) ? 1:0;
-	s->obmc= (avctx->flags & CODEC_FLAG_OBMC) ? 1:0;
-	s->loop_filter= (avctx->flags & CODEC_FLAG_LOOP_FILTER) ? 1:0;
-	s->unrestricted_mv= s->obmc || s->loop_filter || s->umvplus;
-        s->h263_slice_structured= (s->flags & CODEC_FLAG_H263P_SLICE_STRUCT) ? 1:0;
-
-	/* /Fx */
-        /* These are just to be sure */
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_FLV1:
-        s->out_format = FMT_H263;
-        s->h263_flv = 2; /* format = 1; 11-bit codes */
-        s->unrestricted_mv = 1;
-        s->rtp_mode=0; /* don't allow GOB */
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_RV10:
-        s->out_format = FMT_H263;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_RV20:
-        s->out_format = FMT_H263;
-        avctx->delay=0;
-        s->low_delay=1;
-        s->modified_quant=1;
-        s->h263_aic=1;
-        s->h263_plus=1;
-        s->loop_filter=1;
-        s->unrestricted_mv= s->obmc || s->loop_filter || s->umvplus;
-        break;
-    case CODEC_ID_MPEG4:
-        s->out_format = FMT_H263;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->low_delay= s->max_b_frames ? 0 : 1;
-        avctx->delay= s->low_delay ? 0 : (s->max_b_frames + 1);
-        break;
-    case CODEC_ID_MSMPEG4V1:
-        s->out_format = FMT_H263;
-        s->h263_msmpeg4 = 1;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->msmpeg4_version= 1;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_MSMPEG4V2:
-        s->out_format = FMT_H263;
-        s->h263_msmpeg4 = 1;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->msmpeg4_version= 2;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_MSMPEG4V3:
-        s->out_format = FMT_H263;
-        s->h263_msmpeg4 = 1;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->msmpeg4_version= 3;
-        s->flipflop_rounding=1;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_WMV1:
-        s->out_format = FMT_H263;
-        s->h263_msmpeg4 = 1;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->msmpeg4_version= 4;
-        s->flipflop_rounding=1;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
-    case CODEC_ID_WMV2:
-        s->out_format = FMT_H263;
-        s->h263_msmpeg4 = 1;
-        s->h263_pred = 1;
-        s->unrestricted_mv = 1;
-        s->msmpeg4_version= 5;
-        s->flipflop_rounding=1;
-        avctx->delay=0;
-        s->low_delay=1;
-        break;
+//     case CODEC_ID_LJPEG:
+//     case CODEC_ID_MJPEG:
+//         s->out_format = FMT_MJPEG;
+//         s->intra_only = 1; /* force intra only for jpeg */
+//         s->mjpeg_write_tables = 1; /* write all tables */
+// 	s->mjpeg_data_only_frames = 0; /* write all the needed headers */
+//         s->mjpeg_vsample[0] = 1<<chroma_v_shift;
+//         s->mjpeg_vsample[1] = 1;
+//         s->mjpeg_vsample[2] = 1; 
+//         s->mjpeg_hsample[0] = 1<<chroma_h_shift;
+//         s->mjpeg_hsample[1] = 1; 
+//         s->mjpeg_hsample[2] = 1; 
+//         if (mjpeg_init(s) < 0)
+//             return -1;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_H261:
+//         s->out_format = FMT_H261;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_H263:
+//         if (h263_get_picture_format(s->width, s->height) == 7) {
+//             av_log(avctx, AV_LOG_INFO, "Input picture size isn't suitable for h263 codec! try h263+\n");
+//             return -1;
+//         }
+//         s->out_format = FMT_H263;
+// 	s->obmc= (avctx->flags & CODEC_FLAG_OBMC) ? 1:0;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_H263P:
+//         s->out_format = FMT_H263;
+//         s->h263_plus = 1;
+// 	/* Fx */
+//         s->umvplus = (avctx->flags & CODEC_FLAG_H263P_UMV) ? 1:0;
+// 	s->h263_aic= (avctx->flags & CODEC_FLAG_H263P_AIC) ? 1:0;
+// 	s->modified_quant= s->h263_aic;
+// 	s->alt_inter_vlc= (avctx->flags & CODEC_FLAG_H263P_AIV) ? 1:0;
+// 	s->obmc= (avctx->flags & CODEC_FLAG_OBMC) ? 1:0;
+// 	s->loop_filter= (avctx->flags & CODEC_FLAG_LOOP_FILTER) ? 1:0;
+// 	s->unrestricted_mv= s->obmc || s->loop_filter || s->umvplus;
+//         s->h263_slice_structured= (s->flags & CODEC_FLAG_H263P_SLICE_STRUCT) ? 1:0;
+// 
+// 	/* /Fx */
+//         /* These are just to be sure */
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_FLV1:
+//         s->out_format = FMT_H263;
+//         s->h263_flv = 2; /* format = 1; 11-bit codes */
+//         s->unrestricted_mv = 1;
+//         s->rtp_mode=0; /* don't allow GOB */
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_RV10:
+//         s->out_format = FMT_H263;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_RV20:
+//         s->out_format = FMT_H263;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         s->modified_quant=1;
+//         s->h263_aic=1;
+//         s->h263_plus=1;
+//         s->loop_filter=1;
+//         s->unrestricted_mv= s->obmc || s->loop_filter || s->umvplus;
+//         break;
+//     case CODEC_ID_MPEG4:
+//         s->out_format = FMT_H263;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->low_delay= s->max_b_frames ? 0 : 1;
+//         avctx->delay= s->low_delay ? 0 : (s->max_b_frames + 1);
+//         break;
+//     case CODEC_ID_MSMPEG4V1:
+//         s->out_format = FMT_H263;
+//         s->h263_msmpeg4 = 1;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->msmpeg4_version= 1;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_MSMPEG4V2:
+//         s->out_format = FMT_H263;
+//         s->h263_msmpeg4 = 1;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->msmpeg4_version= 2;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_MSMPEG4V3:
+//         s->out_format = FMT_H263;
+//         s->h263_msmpeg4 = 1;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->msmpeg4_version= 3;
+//         s->flipflop_rounding=1;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_WMV1:
+//         s->out_format = FMT_H263;
+//         s->h263_msmpeg4 = 1;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->msmpeg4_version= 4;
+//         s->flipflop_rounding=1;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
+//     case CODEC_ID_WMV2:
+//         s->out_format = FMT_H263;
+//         s->h263_msmpeg4 = 1;
+//         s->h263_pred = 1;
+//         s->unrestricted_mv = 1;
+//         s->msmpeg4_version= 5;
+//         s->flipflop_rounding=1;
+//         avctx->delay=0;
+//         s->low_delay=1;
+//         break;
     default:
         return -1;
     }
@@ -1277,13 +1277,13 @@
     /* init q matrix */
     for(i=0;i<64;i++) {
         int j= s->dsp.idct_permutation[i];
-        if(s->codec_id==CODEC_ID_MPEG4 && s->mpeg_quant){
-            s->intra_matrix[j] = ff_mpeg4_default_intra_matrix[i];
-            s->inter_matrix[j] = ff_mpeg4_default_non_intra_matrix[i];
-        }else if(s->out_format == FMT_H263 || s->out_format == FMT_H261){
-            s->intra_matrix[j] =
-            s->inter_matrix[j] = ff_mpeg1_default_non_intra_matrix[i];
-        }else
+//         if(s->codec_id==CODEC_ID_MPEG4 && s->mpeg_quant){
+//             s->intra_matrix[j] = ff_mpeg4_default_intra_matrix[i];
+//             s->inter_matrix[j] = ff_mpeg4_default_non_intra_matrix[i];
+//         }else if(s->out_format == FMT_H263 || s->out_format == FMT_H261){
+//             s->intra_matrix[j] =
+//             s->inter_matrix[j] = ff_mpeg1_default_non_intra_matrix[i];
+//         }else
         { /* mpeg1/2 */
             s->intra_matrix[j] = ff_mpeg1_default_intra_matrix[i];
             s->inter_matrix[j] = ff_mpeg1_default_non_intra_matrix[i];
@@ -1553,12 +1553,12 @@
     if(s->mpeg_quant || s->codec_id == CODEC_ID_MPEG2VIDEO){
         s->dct_unquantize_intra = s->dct_unquantize_mpeg2_intra;
         s->dct_unquantize_inter = s->dct_unquantize_mpeg2_inter;
-    }else if(s->out_format == FMT_H263 || s->out_format == FMT_H261){
-        s->dct_unquantize_intra = s->dct_unquantize_h263_intra;
-        s->dct_unquantize_inter = s->dct_unquantize_h263_inter;
-    }else{
-        s->dct_unquantize_intra = s->dct_unquantize_mpeg1_intra;
-        s->dct_unquantize_inter = s->dct_unquantize_mpeg1_inter;
+//     }else if(s->out_format == FMT_H263 || s->out_format == FMT_H261){
+//         s->dct_unquantize_intra = s->dct_unquantize_h263_intra;
+//         s->dct_unquantize_inter = s->dct_unquantize_h263_inter;
+//     }else{
+//         s->dct_unquantize_intra = s->dct_unquantize_mpeg1_intra;
+//         s->dct_unquantize_inter = s->dct_unquantize_mpeg1_inter;
     }
 
     if(s->dct_error_sum){
@@ -2379,14 +2379,14 @@
                     put_bits(&s->pb, 8, 0);
                 }
             break;
-            case CODEC_ID_MPEG4:
-                put_bits(&s->pb, 16, 0);
-                put_bits(&s->pb, 16, 0x1C3);
-                stuffing_count -= 4;
-                while(stuffing_count--){
-                    put_bits(&s->pb, 8, 0xFF);
-                }
-            break;
+//             case CODEC_ID_MPEG4:
+//                 put_bits(&s->pb, 16, 0);
+//                 put_bits(&s->pb, 16, 0x1C3);
+//                 stuffing_count -= 4;
+//                 while(stuffing_count--){
+//                     put_bits(&s->pb, 8, 0xFF);
+//                 }
+//             break;
             default:
                 av_log(s->avctx, AV_LOG_ERROR, "vbv buffer overflow\n");
             }
@@ -3797,7 +3797,8 @@
                     add_dequant_dct(s, block[4], 4, dest_cb, uvlinesize, s->chroma_qscale);
                     add_dequant_dct(s, block[5], 5, dest_cr, uvlinesize, s->chroma_qscale);
                 }
-            } else if(s->codec_id != CODEC_ID_WMV2){
+            } 
+	    else if(s->codec_id != CODEC_ID_WMV2){
                 add_dct(s, block[0], 0, dest_y                          , dct_linesize);
                 add_dct(s, block[1], 1, dest_y              + block_size, dct_linesize);
                 add_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize);
@@ -3825,9 +3826,9 @@
                     }
                 }//fi gray
             }
-            else{
-                ff_wmv2_add_mb(s, block, dest_y, dest_cb, dest_cr);
-            }
+//             else{
+//                 ff_wmv2_add_mb(s, block, dest_y, dest_cb, dest_cr);
+//             }
         } else {
             /* dct only in intra block */
             if(s->encoding || !(s->codec_id==CODEC_ID_MPEG1VIDEO || s->codec_id==CODEC_ID_MPEG2VIDEO)){
@@ -4087,18 +4088,18 @@
             if(s->out_format==FMT_H263){
                 s->dquant= clip(s->dquant, -2, 2); //FIXME RD
             
-                if(s->codec_id==CODEC_ID_MPEG4){        
-                    if(!s->mb_intra){
-                        if(s->pict_type == B_TYPE){
-                            if(s->dquant&1) 
-                                s->dquant= (s->dquant/2)*2;
-                            if(s->mv_dir&MV_DIRECT)
-                                s->dquant= 0;
-                        }
-                        if(s->mv_type==MV_TYPE_8X8)
-                            s->dquant=0;
-                    }
-                }
+//                 if(s->codec_id==CODEC_ID_MPEG4){        
+//                     if(!s->mb_intra){
+//                         if(s->pict_type == B_TYPE){
+//                             if(s->dquant&1) 
+//                                 s->dquant= (s->dquant/2)*2;
+//                             if(s->mv_dir&MV_DIRECT)
+//                                 s->dquant= 0;
+//                         }
+//                         if(s->mv_type==MV_TYPE_8X8)
+//                             s->dquant=0;
+//                     }
+//                 }
             }
         }
         ff_set_qscale(s, last_qp + s->dquant);
@@ -4297,26 +4298,26 @@
     case CODEC_ID_MPEG1VIDEO:
     case CODEC_ID_MPEG2VIDEO:
         mpeg1_encode_mb(s, s->block, motion_x, motion_y); break;
-    case CODEC_ID_MPEG4:
-        mpeg4_encode_mb(s, s->block, motion_x, motion_y); break;
-    case CODEC_ID_MSMPEG4V2:
-    case CODEC_ID_MSMPEG4V3:
-    case CODEC_ID_WMV1:
-        msmpeg4_encode_mb(s, s->block, motion_x, motion_y); break;
-    case CODEC_ID_WMV2:
-         ff_wmv2_encode_mb(s, s->block, motion_x, motion_y); break;
-#ifdef CONFIG_H261_ENCODER
-    case CODEC_ID_H261:
-        ff_h261_encode_mb(s, s->block, motion_x, motion_y); break;
-#endif
-    case CODEC_ID_H263:
-    case CODEC_ID_H263P:
-    case CODEC_ID_FLV1:
-    case CODEC_ID_RV10:
-    case CODEC_ID_RV20:
-        h263_encode_mb(s, s->block, motion_x, motion_y); break;
-    case CODEC_ID_MJPEG:
-        mjpeg_encode_mb(s, s->block); break;
+//     case CODEC_ID_MPEG4:
+//         mpeg4_encode_mb(s, s->block, motion_x, motion_y); break;
+//     case CODEC_ID_MSMPEG4V2:
+//     case CODEC_ID_MSMPEG4V3:
+//     case CODEC_ID_WMV1:
+//         msmpeg4_encode_mb(s, s->block, motion_x, motion_y); break;
+//     case CODEC_ID_WMV2:
+//          ff_wmv2_encode_mb(s, s->block, motion_x, motion_y); break;
+// #ifdef CONFIG_H261_ENCODER
+//     case CODEC_ID_H261:
+//         ff_h261_encode_mb(s, s->block, motion_x, motion_y); break;
+// #endif
+//     case CODEC_ID_H263:
+//     case CODEC_ID_H263P:
+//     case CODEC_ID_FLV1:
+//     case CODEC_ID_RV10:
+//     case CODEC_ID_RV20:
+//         h263_encode_mb(s, s->block, motion_x, motion_y); break;
+//     case CODEC_ID_MJPEG:
+//         mjpeg_encode_mb(s, s->block); break;
     default:
         assert(0);
     }
@@ -4599,15 +4600,15 @@
 }
 
 static void write_slice_end(MpegEncContext *s){
-    if(s->codec_id==CODEC_ID_MPEG4){
-        if(s->partitioned_frame){
-            ff_mpeg4_merge_partitions(s);
-        }
-    
-        ff_mpeg4_stuffing(&s->pb);
-    }else if(s->out_format == FMT_MJPEG){
-        ff_mjpeg_stuffing(&s->pb);
-    }
+//     if(s->codec_id==CODEC_ID_MPEG4){
+//         if(s->partitioned_frame){
+//             ff_mpeg4_merge_partitions(s);
+//         }
+//     
+//         ff_mpeg4_stuffing(&s->pb);
+//     }else if(s->out_format == FMT_MJPEG){
+//         ff_mjpeg_stuffing(&s->pb);
+//     }
 
     align_put_bits(&s->pb);
     flush_put_bits(&s->pb);
@@ -4655,17 +4656,17 @@
      
     s->last_mv_dir = 0;
 
-    switch(s->codec_id){
-    case CODEC_ID_H263:
-    case CODEC_ID_H263P:
-    case CODEC_ID_FLV1:
-        s->gob_index = ff_h263_get_gob_height(s);
-        break;
-    case CODEC_ID_MPEG4:
-        if(s->partitioned_frame)
-            ff_mpeg4_init_partitions(s);
-        break;
-    }
+//     switch(s->codec_id){
+//     case CODEC_ID_H263:
+//     case CODEC_ID_H263P:
+//     case CODEC_ID_FLV1:
+//         s->gob_index = ff_h263_get_gob_height(s);
+//         break;
+//     case CODEC_ID_MPEG4:
+//         if(s->partitioned_frame)
+//             ff_mpeg4_init_partitions(s);
+//         break;
+//     }
 
     s->resync_mb_x=0;
     s->resync_mb_y=0; 
@@ -4703,11 +4704,11 @@
             ff_update_block_index(s);
 
 #ifdef CONFIG_H261_ENCODER
-            if(s->codec_id == CODEC_ID_H261){
-                ff_h261_reorder_mb_index(s);
-                xy= s->mb_y*s->mb_stride + s->mb_x;
-                mb_type= s->mb_type[xy];
-            }
+//             if(s->codec_id == CODEC_ID_H261){
+//                 ff_h261_reorder_mb_index(s);
+//                 xy= s->mb_y*s->mb_stride + s->mb_x;
+//                 mb_type= s->mb_type[xy];
+//             }
 #endif
 
             /* write gob / video packet header  */
@@ -4721,11 +4722,11 @@
                 if(s->start_mb_y == mb_y && mb_y > 0 && mb_x==0) is_gob_start=1;
                 
                 switch(s->codec_id){
-                case CODEC_ID_H263:
-                case CODEC_ID_H263P:
-                    if(!s->h263_slice_structured)
-                        if(s->mb_x || s->mb_y%s->gob_index) is_gob_start=0;
-                    break;
+//                 case CODEC_ID_H263:
+//                 case CODEC_ID_H263P:
+//                     if(!s->h263_slice_structured)
+//                         if(s->mb_x || s->mb_y%s->gob_index) is_gob_start=0;
+//                     break;
                 case CODEC_ID_MPEG2VIDEO:
                     if(s->mb_x==0 && s->mb_y!=0) is_gob_start=1;
                 case CODEC_ID_MPEG1VIDEO:
@@ -4737,9 +4738,9 @@
                     if(s->start_mb_y != mb_y || mb_x!=0){
                         write_slice_end(s);
 
-                        if(s->codec_id==CODEC_ID_MPEG4 && s->partitioned_frame){
-                            ff_mpeg4_init_partitions(s);
-                        }
+//                         if(s->codec_id==CODEC_ID_MPEG4 && s->partitioned_frame){
+//                             ff_mpeg4_init_partitions(s);
+//                         }
                     }
                 
                     assert((put_bits_count(&s->pb)&7) == 0);
@@ -4763,19 +4764,19 @@
                     }
                     
                     switch(s->codec_id){
-                    case CODEC_ID_MPEG4:
-                        ff_mpeg4_encode_video_packet_header(s);
-                        ff_mpeg4_clean_buffers(s);
-                    break;
+//                     case CODEC_ID_MPEG4:
+//                         ff_mpeg4_encode_video_packet_header(s);
+//                         ff_mpeg4_clean_buffers(s);
+//                     break;
                     case CODEC_ID_MPEG1VIDEO:
                     case CODEC_ID_MPEG2VIDEO:
                         ff_mpeg1_encode_slice_header(s);
                         ff_mpeg1_clean_buffers(s);
                     break;
-                    case CODEC_ID_H263:
-                    case CODEC_ID_H263P:
-                        h263_encode_gob_header(s, mb_y);                       
-                    break;
+//                     case CODEC_ID_H263:
+//                     case CODEC_ID_H263P:
+//                         h263_encode_gob_header(s, mb_y);                       
+//                     break;
                     }
 
                     if(s->flags&CODEC_FLAG_PASS1){
@@ -5364,14 +5365,14 @@
 
     if(s->adaptive_quant){
         switch(s->codec_id){
-        case CODEC_ID_MPEG4:
-            ff_clean_mpeg4_qscales(s);
-            break;
-        case CODEC_ID_H263:
-        case CODEC_ID_H263P:
-        case CODEC_ID_FLV1:
-            ff_clean_h263_qscales(s);
-            break;
+//         case CODEC_ID_MPEG4:
+//             ff_clean_mpeg4_qscales(s);
+//             break;
+//         case CODEC_ID_H263:
+//         case CODEC_ID_H263P:
+//         case CODEC_ID_FLV1:
+//             ff_clean_h263_qscales(s);
+//             break;
         }
 
         s->lambda= s->lambda_table[0];
@@ -5408,39 +5409,39 @@
 
     s->last_bits= put_bits_count(&s->pb);
     switch(s->out_format) {
-    case FMT_MJPEG:
-        mjpeg_picture_header(s);
-        break;
-#ifdef CONFIG_H261_ENCODER
-    case FMT_H261:
-        ff_h261_encode_picture_header(s, picture_number);
-        break;
-#endif
-    case FMT_H263:
-        if (s->codec_id == CODEC_ID_WMV2) 
-            ff_wmv2_encode_picture_header(s, picture_number);
-        else if (s->h263_msmpeg4) 
-            msmpeg4_encode_picture_header(s, picture_number);
-        else if (s->h263_pred)
-            mpeg4_encode_picture_header(s, picture_number);
-#ifdef CONFIG_RV10_ENCODER
-        else if (s->codec_id == CODEC_ID_RV10) 
-            rv10_encode_picture_header(s, picture_number);
-#endif
-#ifdef CONFIG_RV20_ENCODER
-        else if (s->codec_id == CODEC_ID_RV20) 
-            rv20_encode_picture_header(s, picture_number);
-#endif
-        else if (s->codec_id == CODEC_ID_FLV1)
-            ff_flv_encode_picture_header(s, picture_number);
-        else
-            h263_encode_picture_header(s, picture_number);
-        break;
+//     case FMT_MJPEG:
+//         mjpeg_picture_header(s);
+//         break;
+// #ifdef CONFIG_H261_ENCODER
+//     case FMT_H261:
+//         ff_h261_encode_picture_header(s, picture_number);
+//         break;
+// #endif
+//     case FMT_H263:
+//         if (s->codec_id == CODEC_ID_WMV2) 
+//             ff_wmv2_encode_picture_header(s, picture_number);
+//         else if (s->h263_msmpeg4) 
+//             msmpeg4_encode_picture_header(s, picture_number);
+//         else if (s->h263_pred)
+//             mpeg4_encode_picture_header(s, picture_number);
+// #ifdef CONFIG_RV10_ENCODER
+//         else if (s->codec_id == CODEC_ID_RV10) 
+//             rv10_encode_picture_header(s, picture_number);
+// #endif
+// #ifdef CONFIG_RV20_ENCODER
+//         else if (s->codec_id == CODEC_ID_RV20) 
+//             rv20_encode_picture_header(s, picture_number);
+// #endif
+//         else if (s->codec_id == CODEC_ID_FLV1)
+//             ff_flv_encode_picture_header(s, picture_number);
+//         else
+//             h263_encode_picture_header(s, picture_number);
+//         break;
     case FMT_MPEG1:
         mpeg1_encode_picture_header(s, picture_number);
         break;
-    case FMT_H264:
-        break;
+//     case FMT_H264:
+//         break;
     default:
         assert(0);
     }
@@ -6439,126 +6440,126 @@
 }
 
 #ifdef CONFIG_ENCODERS
-AVCodec h263_encoder = {
-    "h263",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_H263,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec h263p_encoder = {
-    "h263p",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_H263P,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec flv_encoder = {
-    "flv",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_FLV1,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec rv10_encoder = {
-    "rv10",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_RV10,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec rv20_encoder = {
-    "rv20",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_RV20,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec mpeg4_encoder = {
-    "mpeg4",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_MPEG4,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-    .capabilities= CODEC_CAP_DELAY,
-};
-
-AVCodec msmpeg4v1_encoder = {
-    "msmpeg4v1",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_MSMPEG4V1,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec msmpeg4v2_encoder = {
-    "msmpeg4v2",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_MSMPEG4V2,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec msmpeg4v3_encoder = {
-    "msmpeg4",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_MSMPEG4V3,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec wmv1_encoder = {
-    "wmv1",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_WMV1,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
-};
-
-AVCodec mjpeg_encoder = {
-    "mjpeg",
-    CODEC_TYPE_VIDEO,
-    CODEC_ID_MJPEG,
-    sizeof(MpegEncContext),
-    MPV_encode_init,
-    MPV_encode_picture,
-    MPV_encode_end,
-    .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUVJ420P, -1},
-};
+// AVCodec h263_encoder = {
+//     "h263",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_H263,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec h263p_encoder = {
+//     "h263p",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_H263P,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec flv_encoder = {
+//     "flv",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_FLV1,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec rv10_encoder = {
+//     "rv10",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_RV10,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec rv20_encoder = {
+//     "rv20",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_RV20,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec mpeg4_encoder = {
+//     "mpeg4",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_MPEG4,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+//     .capabilities= CODEC_CAP_DELAY,
+// };
+// 
+// AVCodec msmpeg4v1_encoder = {
+//     "msmpeg4v1",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_MSMPEG4V1,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec msmpeg4v2_encoder = {
+//     "msmpeg4v2",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_MSMPEG4V2,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec msmpeg4v3_encoder = {
+//     "msmpeg4",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_MSMPEG4V3,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec wmv1_encoder = {
+//     "wmv1",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_WMV1,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUV420P, -1},
+// };
+// 
+// AVCodec mjpeg_encoder = {
+//     "mjpeg",
+//     CODEC_TYPE_VIDEO,
+//     CODEC_ID_MJPEG,
+//     sizeof(MpegEncContext),
+//     MPV_encode_init,
+//     MPV_encode_picture,
+//     MPV_encode_end,
+//     .pix_fmts= (enum PixelFormat[]){PIX_FMT_YUVJ420P, -1},
+// };
 
 #endif //CONFIG_ENCODERS
diff -urN ffmpeg.orig/libavformat/Makefile ffmpeg.src/libavformat/Makefile
--- ffmpeg.orig/libavformat/Makefile	2005-09-13 19:32:04.000000000 +0200
+++ ffmpeg.src/libavformat/Makefile	2005-11-27 16:34:24.178552608 +0100
@@ -12,69 +12,13 @@
 PPOBJS=
 
 # mux and demuxes
-OBJS+=mpeg.o mpegts.o mpegtsenc.o ffm.o crc.o img.o img2.o raw.o rm.o \
-      avienc.o avidec.o wav.o mmf.o swf.o au.o gif.o mov.o mpjpeg.o dv.o \
-      yuv4mpeg.o 4xm.o flvenc.o flvdec.o movenc.o psxstr.o idroq.o ipmovie.o \
-      nut.o wc3movie.o mp3.o westwood.o segafilm.o idcin.o flic.o \
-      sierravmd.o matroska.o sol.o electronicarts.o nsvdec.o asf.o asf-enc.o \
-      ogg2.o oggparsevorbis.o oggparsetheora.o oggparseflac.o daud.o
-AMROBJS=
-ifeq ($(AMR_NB),yes)
-AMROBJS= amr.o
-endif
-ifeq ($(AMR_NB_FIXED),yes)
-AMROBJS= amr.o
-endif
-ifeq ($(AMR_WB),yes)
-AMROBJS= amr.o
-endif
-OBJS+= $(AMROBJS)
+OBJS+=mpeg.o mpegts.o mpegtsenc.o 
 
-# image formats
-OBJS+= pnm.o yuv.o png.o jpeg.o gifdec.o sgi.o
 # file I/O
 OBJS+= avio.o aviobuf.o file.o 
-OBJS+= framehook.o 
-
-ifeq ($(CONFIG_VIDEO4LINUX),yes)
-OBJS+= grab.o
-endif
-
-ifeq ($(CONFIG_BKTR),yes)
-OBJS+= grab_bktr.o
-endif
-
-ifeq ($(CONFIG_DV1394),yes)
-OBJS+= dv1394.o
-endif
-
-ifeq ($(CONFIG_DC1394),yes)
-OBJS+= dc1394.o
-endif
-
-ifeq ($(CONFIG_AUDIO_OSS),yes)
-OBJS+= audio.o 
-endif
 
 EXTRALIBS += -L../libavutil -lavutil$(BUILDSUF)
 
-ifeq ($(CONFIG_AUDIO_BEOS),yes)
-PPOBJS+= beosaudio.o
-EXTRALIBS+=-lbe -lmedia
-endif
-
-ifeq ($(CONFIG_NETWORK),yes)
-OBJS+= udp.o tcp.o http.o rtsp.o rtp.o rtpproto.o
-# BeOS and Darwin network stuff
-ifeq ($(NEED_INET_ATON),yes)
-OBJS+= barpainet.o
-endif
-endif
-
-ifeq ($(CONFIG_LIBOGG),yes)
-OBJS+= ogg.o
-endif
-
 ifeq ($(TARGET_ARCH_SPARC64),yes)
 CFLAGS+= -mcpu=ultrasparc -mtune=ultrasparc
 endif
@@ -129,9 +73,9 @@
 install-headers:
 	mkdir -p "$(prefix)/include/ffmpeg"
 	install -m 644 $(SRC_PATH)/libavformat/avformat.h $(SRC_PATH)/libavformat/avio.h \
-                $(SRC_PATH)/libavformat/rtp.h $(SRC_PATH)/libavformat/rtsp.h \
-                $(SRC_PATH)/libavformat/rtspcodes.h \
                 "$(prefix)/include/ffmpeg"
+#                $(SRC_PATH)/libavformat/rtp.h $(SRC_PATH)/libavformat/rtsp.h 
+#                $(SRC_PATH)/libavformat/rtspcodes.h 
 	install -d $(libdir)/pkgconfig
 	install -m 644 ../libavformat.pc $(libdir)/pkgconfig
 
diff -urN ffmpeg.orig/libavformat/allformats.c ffmpeg.src/libavformat/allformats.c
--- ffmpeg.orig/libavformat/allformats.c	2005-09-13 19:32:04.000000000 +0200
+++ ffmpeg.src/libavformat/allformats.c	2005-11-27 16:34:24.179552456 +0100
@@ -37,108 +37,8 @@
 
     mpegps_init();
     mpegts_init();
-#ifdef CONFIG_ENCODERS
-    crc_init();
-    img_init();
-    img2_init();
-#endif //CONFIG_ENCODERS
-    raw_init();
-    mp3_init();
-    rm_init();
-    asf_init();
-#ifdef CONFIG_ENCODERS
-    avienc_init();
-#endif //CONFIG_ENCODERS
-    avidec_init();
-    ff_wav_init();
-    ff_mmf_init();
-    swf_init();
-    au_init();
-#ifdef CONFIG_ENCODERS
-    gif_init();
-#endif //CONFIG_ENCODERS
-    mov_init();
-#ifdef CONFIG_ENCODERS
-    movenc_init();
-    jpeg_init();
-#endif //CONFIG_ENCODERS
-    ff_dv_init();
-    fourxm_init();
-#ifdef CONFIG_ENCODERS
-    flvenc_init();
-#endif //CONFIG_ENCODERS
-    flvdec_init();
-    str_init();
-    roq_init();
-    ipmovie_init();
-    wc3_init();
-    westwood_init();
-    film_init();
-    idcin_init();
-    flic_init();
-    vmd_init();
-
-#if defined(AMR_NB) || defined(AMR_NB_FIXED) || defined(AMR_WB)
-    amr_init();
-#endif
-    yuv4mpeg_init();
-
-    ogg_init();
-#ifdef CONFIG_LIBOGG
-    libogg_init();
-#endif
-
-    ffm_init();
-#if defined(CONFIG_VIDEO4LINUX) || defined(CONFIG_BKTR)
-    video_grab_init();
-#endif
-#if defined(CONFIG_AUDIO_OSS) || defined(CONFIG_AUDIO_BEOS)
-    audio_init();
-#endif
-
-#ifdef CONFIG_DV1394
-    dv1394_init();
-#endif
-
-#ifdef CONFIG_DC1394
-    dc1394_init();
-#endif
-
-    nut_init();
-    matroska_init();
-    sol_init();
-    ea_init();
-    nsvdec_init();
-    daud_init();
-
-#ifdef CONFIG_ENCODERS
-    /* image formats */
-#if 0
-    av_register_image_format(&pnm_image_format);
-    av_register_image_format(&pbm_image_format);
-    av_register_image_format(&pgm_image_format);
-    av_register_image_format(&ppm_image_format);
-    av_register_image_format(&pam_image_format);
-    av_register_image_format(&pgmyuv_image_format);
-    av_register_image_format(&yuv_image_format);
-#ifdef CONFIG_ZLIB
-    av_register_image_format(&png_image_format);
-#endif
-    av_register_image_format(&jpeg_image_format);
-#endif
-    av_register_image_format(&gif_image_format);  
-//    av_register_image_format(&sgi_image_format); heap corruption, dont enable
-#endif //CONFIG_ENCODERS
-
+    
     /* file protocols */
     register_protocol(&file_protocol);
     register_protocol(&pipe_protocol);
-#ifdef CONFIG_NETWORK
-    rtsp_init();
-    rtp_init();
-    register_protocol(&udp_protocol);
-    register_protocol(&rtp_protocol);
-    register_protocol(&tcp_protocol);
-    register_protocol(&http_protocol);
-#endif
 }
diff -urN ffmpeg.orig/libavformat/avformat.h ffmpeg.src/libavformat/avformat.h
--- ffmpeg.orig/libavformat/avformat.h	2005-09-13 19:32:04.000000000 +0200
+++ ffmpeg.src/libavformat/avformat.h	2005-11-27 16:34:24.181552152 +0100
@@ -549,9 +549,9 @@
 /* daud.c */
 int daud_init(void);
 
-#include "rtp.h"
+// #include "rtp.h"
 
-#include "rtsp.h"
+// #include "rtsp.h"
 
 /* yuv4mpeg.c */
 extern AVOutputFormat yuv4mpegpipe_oformat;
diff -urN ffmpeg.orig/libavformat/utils.c ffmpeg.src/libavformat/utils.c
--- ffmpeg.orig/libavformat/utils.c	2005-09-13 19:32:05.000000000 +0200
+++ ffmpeg.src/libavformat/utils.c	2005-11-27 16:34:24.183551848 +0100
@@ -85,16 +85,16 @@
     int score_max, score;
 
     /* specific test for image sequences */
-    if (!short_name && filename && 
-        filename_number_test(filename) >= 0 &&
-        av_guess_image2_codec(filename) != CODEC_ID_NONE) {
-        return guess_format("image2", NULL, NULL);
-    }
-    if (!short_name && filename && 
-        filename_number_test(filename) >= 0 &&
-        guess_image_format(filename)) {
-        return guess_format("image", NULL, NULL);
-    }
+//     if (!short_name && filename && 
+//         filename_number_test(filename) >= 0 &&
+//         av_guess_image2_codec(filename) != CODEC_ID_NONE) {
+//         return guess_format("image2", NULL, NULL);
+//     }
+//     if (!short_name && filename && 
+//         filename_number_test(filename) >= 0 &&
+//         guess_image_format(filename)) {
+//         return guess_format("image", NULL, NULL);
+//     }
 
     /* find the proper file type */
     fmt_found = NULL;
@@ -146,9 +146,9 @@
     if(type == CODEC_TYPE_VIDEO){
         enum CodecID codec_id= CODEC_ID_NONE;
 
-        if(!strcmp(fmt->name, "image2") || !strcmp(fmt->name, "image2pipe")){
-            codec_id= av_guess_image2_codec(filename);
-        }
+//         if(!strcmp(fmt->name, "image2") || !strcmp(fmt->name, "image2pipe")){
+//             codec_id= av_guess_image2_codec(filename);
+//         }
         if(codec_id == CODEC_ID_NONE)
             codec_id= fmt->video_codec;
         return codec_id;
